#!%perl%
use strict;
use warnings;
# Copyright (c) 2011-2012 Los Alamos National Security, LLC. All rights reserved.

# This program was prepared by Los Alamos National Security, LLC at Los Alamos 
# National Laboratory (LANL) under contract No. DE-AC52-06NA25396 with the U.S. 
# Department of Energy (DOE). All rights in the program are reserved by the DOE and 
# Los Alamos National Security, LLC.  Permission is granted to the public to copy and
# use this software without charge, provided that this Notice and any statement of 
# authorship are reproduced on all copies.  Neither the U.S. Government nor LANS 
# makes any warranty, express or implied, or assumes any liability or responsibility 
# for the use of this software.
#
# @author Graham Van Heule
#
##### iptablestest
# Runs some basic checks to ensure the iptables config file is valid.
# Note: This only checks for basic mistakes, not a full syntax check.

use Getopt::Long qw(:config no_ignore_case require_order);

my $verbose =0;
my $version="%version%";

my $opt_version = undef;
my $opt_help = undef;
my $opt_template = undef;
my $opt_verbose = undef;

GetOptions(
	'version|V'	=> \$opt_version,
	'verbose|v'	=> \$opt_verbose,
	'template|v'	=> \$opt_template,
	'help|h'	=> \$opt_help
);
if (defined $opt_version) {
	print "iptablestest v$version\n";
	exit 0;
}
# Help
if (!(defined $ARGV[0]) || $ARGV[0] eq "-h") {
	print "iptablestest <options> <file>\n";
	print "options:\n";
	print "\t-V --version: displays the current version\n";
	print "\t-v --verbose: displays more information about errors found\n";
	print "\t-t --template: use for testing a template as opposed to a normal iptables config file\n";
	print "\t-h --help: displays this menu\n";
	exit 0;
}

my @files =();
# ARGV[0] is the file we will be looking through
foreach my $file (@ARGV) {
	my @list = `ls $file`;
	@files=(@files,@list);
}	



foreach my $file (@files) {
	$file=~s/\n//ig;
	print "#################\n";
	print "# Checking $file\n";
	open(my $fileHandle, $file) or die "Error! Could not open $file\n";
	my @Contents=<$fileHandle>;
	close($fileHandle);
	my $characters;
	if (defined $opt_template) {
		$characters="abcdefghijklmnopqrstuvwxyz1234567890-+_ \n*:.\"\'\[\]\(\)/,!\@";
	}
	else {
		$characters="abcdefghijklmnopqrstuvwxyz1234567890-+_ \n*:.\"\'\[\]\(\)/,!";
	}

	# Does some basic setup. These chains are enabled by default.
	my %chains=();
	$chains{"INPUT"}='e';
	$chains{"OUTPUT"}='e';
	$chains{"FORWARD"}='e';
	$chains{"POSTROUTING"}='e';
	$chains{"PREROUTING"}='e';

	my %chain=();

	my $problem = 0;
	my $lineNum = 0;
	for my $line (@Contents) {
		if (!($line=~/^#/g)) {
			$lineNum++;
			# Do all lines start with a "-A" or ":"?
			if (!($line=~/^-A/ || $line=~/^:/)) {
				if ($line=~/^(.)/ && !$line=~/^COMMIT/) {
					$problem=1;
					print "Error! line $lineNum: Invalid Starting String \"$1\"\n";
				}
			}
			if ($line=~/^\s/ && !($line=~/^\n/)) {
				$problem = 1;
				print "Error! line $lineNum: leading whitespace detected (ie spaces). iptables can't handle this.\n";
			};
			# Ignore anything that ends with a "+" it's most likely just an interface
			$line=~s/\".+\"/\"\"/ig;
			$line=~s/\'.+\'/\'\'/ig;
			# Check to make sure all source or destination flags have an ip address associated with them.
			if ($line=~/(-s) / || $line=~/(-d) /) {
				my $flag = $1;
				if (defined $opt_template) {
					if (!($line=~/$flag \d+\.\d+\.\d+\.\d+ / || $line=~/$flag \d+\.\d+\.\d+\.\d+\/\d+ / || $line=~/\@\S+\s/)) {
						$problem=1;
						print "Error! line $line: ip address or variable not used for $flag statement\n";
						if (defined $opt_verbose) {
							print "line: \"$line\"\n";
						}
						
					};
				} 
				else {
					if (!($line=~/$flag \d+\.\d+\.\d+\.\d+ / || $line=~/$flag \d+\.\d+\.\d+\.\d+\/\d+ /)) {
						$problem=1;
						print "Error! line $lineNum: ip address not used for $1 statement\n";
						if (defined $opt_verbose) {
							print "line: \"$line\"\n";
						}
					}
				};
			}
	
			# Checks to make sure the -d or -s flag makes sense with the chain being used.
			if ($line=~/-A\s(\S+)\s/) {
				my $aChain=$1;
				if ($aChain eq "INPUT") {
					if ($line=~/-j\s+(\S+)\s/) {
						$chains{$1}.="i";
					};
					if ($line=~/-o /) {
						$problem=1;
						print "Error! line $lineNum: The -i flag cannot be used within the output chain.\n";
					}
					if ($line=~/-d /) {
						$problem=1;
						print "Warning! line $lineNum: The -d is used to define a destination. This usually doesn't matter for an input chain. Are you sure you didn't intend to use -s?\n";
					}
				}
				elsif ($aChain eq "OUTPUT") {
					if ($line=~/-j\s+(\S+)\s/) {
						$chains{$1}.="o";
						if ($1 =~/syn-flood/i) {
							print "syn-flood: $line\n";
						};
					};
					if ($line=~/-i /) {
						$problem=1;
						print "Error! line $line: The -i flag cannot be used within the output chain.\n";
					}
					if ($line=~/-s /) {
						$problem=1;
						print "Warning! line $line: The -s is used to define a source. This usually doesn't matter for an output chain. Are you sure you didn't intend to use -d?\n";
					}
				}
				else {
					if ($line=~/-j\s+(\S+)\s/) {
							$chains{$1}.="e";
					};
				};
			};
			# Check to see if any invalid characters exist in the iptables config file.
			my @letters=split("", $line);
			foreach my $letter (@letters) {
			
				$letter=~s/\*/\\\*/g;
				$letter=~s/\./\\\./g;
				$letter=~s/\]/\\\]/g;
				$letter=~s/\[/\\\[/g;
				$letter=~s/\)/\\\)/g;
				$letter=~s/\(/\\\(/g;
				$letter=~s/\+/\\+/g;
				if (!("$characters"=~/.*$letter.*/ig)) {
					$problem=1;
					print "Error! line $lineNum: Illegal character \"$letter\".\n";
					if (defined $opt_verbose) {
						print "line: \"$line\"\n";
					}
					
				}
				
			}
			if  ($line=~/^:(\S+)\s/) {
				my $nChain=$1;
				if (!(defined $chain{$nChain})) {
					$chain{$nChain}=1;
				}
				else {
					print "Error! line $lineNum: $nChain has been defined twice!\n";
				};
			};
		};
	};
	
	# Does a deeper check to see if all -d/-s and -o/-i match the chain being used.
	# This requires the second loop through as the one above matches non standard 
	#  chains to the standard chains as it passes through the config
	$lineNum = 0;
	foreach my $line (@Contents) {
		$lineNum++;
		if (!($line=~/^#/g)) {
			if ($line=~/-A\s+(\S+)\s/) {
				my $aChain=$1;
				if (!(defined $chains{$aChain} && ($chains{$aChain}=~/o/i || $chains{$aChain}=~/e/i))) {
					if ($line=~/-o /) {
						$problem=1;
						print "Error! line $line: The -o flag does not function unless this chain uses the output chain.\n";
					};
					if ($line=~/-d /) {
						$problem=1;
						print "Warning! line $line: The -d is used to define a destination. This usually doesn't matter for an input chain. Are you sure you didn't intend to use -s?\n";
					};
				};
				if (!(defined $chains{$aChain} && ($chains{$aChain}=~/i/i || $chains{$aChain}=~/e/i))) {
					if ($line=~/-i /) {
						$problem=1;
						print "Error! line $line: The -i flag does not function unless this chain uses the input chain.\n";
					};
					if ($line=~/-s /) {
						$problem=1;
						print "Warning! line $line: The -s is used to define a source. This usually doesn't matter for an output chain. Are you sure you didn't intend to use -d?\n";
					};
				};
				if (defined $chains{$aChain} && $chains{$aChain}=~/i/i && $chains{$aChain}=~/o/i) {
					$problem=1;
					print "Warning! line $line: chain $aChain recieves traffic from both OUTPUT and INPUT chains. This may be undesirable...\n";
				};
			};
		};
	};

	print "\n";
	if ($problem ==1) {
		print "Potential problems detected. Please see above\n";
	}
	else {	
		print "$file looks good.\n";
	}
	print "########\n\n\n";
}

# Documentation

=pod

=head1 NAME

B<iptablestest> - checks an existing iptables configuration for problems


=head1 SYNOPSIS

 B<iptablestest> [options] [file]

=head1 DESCRIPTION

B<iptablestest> checks an existing iptables configuration file for common problems. Note that this does not do a full syntax check.

=head1 OPTIONS

=over 4

=item B<-v|--version>

Displays version information

=item B<-c|--config <config>> 

Specify an alternate config file

=item B<-h|--help>

Displays help messages

=head1 EXAMPLES

iptablescheck /etc/sysconfig/iptables - runs a check on the file /etc/sysconfig/iptables

=head1 SEE

=item B iptablesbuild, iptablesbuild.conf
