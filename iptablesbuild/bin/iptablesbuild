#!%perl%
use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case require_order);
# Copyright (c) 2011-2012 Los Alamos National Security, LLC. All rights reserved.

# This program was prepared by Los Alamos National Security, LLC at Los Alamos 
# National Laboratory (LANL) under contract No. DE-AC52-06NA25396 with the U.S. 
# Department of Energy (DOE). All rights in the program are reserved by the DOE and 
# Los Alamos National Security, LLC.  Permission is granted to the public to copy and
# use this software without charge, provided that this Notice and any statement of 
# authorship are reproduced on all copies.  Neither the U.S. Government nor LANS 
# makes any warranty, express or implied, or assumes any liability or responsibility 
# for the use of this software.
#
# @author Graham Van Heule
#
##### iptablesbuild
# This script is intended for the use of generating iptables configurations with the 
# use of the configuration file /etc/iptablesbuild/iptablesbuild.conf and the templates
# in /etc/iptablesbuild/Templates.

my %termColors;
$termColors{"bold"} = `tput bold`;
$termColors{"reset"} = `tput sgr0`;
$termColors{"red"} = `echo -en '\e[0;31m'`;


$| = 1;
my $Version = "%version%";
# Default Config file location
my $config="%conf%/iptablesbuild/iptablesbuild.conf";

my $opt_version = undef;
my $opt_help = undef;
my $opt_config = undef;
my $opt_list = undef;
my $opt_suffix=1;
GetOptions(
	'version|v'	=> \$opt_version,
	'help|h'	=> \$opt_help,
	'config|c=s'	=> \$opt_config,
	'list|l'	=> \$opt_list
);


if (defined $opt_version) {
	print "iptablesbuild Version $Version\n";
	exit 0;
};
if (!(defined $opt_list) && (!(defined $ARGV[0] && $ARGV[0] =~/\S/ ) || defined $opt_help)) {
	print "iptablesbuild.pl\n";
	print "This script generates iptables configurations for the products given in \"$config\"\n\n";
	print "Usage: iptablesbuild.pl <options> <Product|all>\n";
	print "\t-v --version : prints the current version of iptablesbuild\n";
	print "\t-h --help : prints this menu\n";
	print "\t-c --config <file> : select an alternate config file\n";
	print "\t-l --list : Lists off all systems that you can build along with their aliases\n\n";
	print "Technical Assistance: grahamvh\@lanl.gov\n\n";
	exit 0;
};

if (defined $opt_config) {
	$config=$opt_config;
};

open(my $confHandle, "$config") or die "Error! Config file $config not found!\n\a";
my @tmp=<$confHandle>;
my $confl=join("",@tmp);
@tmp=undef;
close($confHandle);
my @cFiles=("$config");
while ($confl=~/\n\s*include\s+(\S+)\s/){
	@cFiles=(@cFiles,$1);
	$confl=~s/include $1//ig;
};

# Set Base Variables
my $curSection="";
my $curSubSection="";
my @CoreChains= ("POSTROUTING", "FORWARD", "INPUT", "OUTPUT");


my %Product;
my %Global;
my %Template;
my %aliases;
my %Warnings;
my @spinner = ("-", "\\", "|", "/");

#Parses the Config file for all entries, and stores them in corisponding variables
foreach my $cFile (@cFiles) {
	my @conf=();
	my $confHandle;
	open($confHandle, "$cFile") or die "Error! Could not open config file \"$cFile\"!";
	@conf=<$confHandle>;
	close($confHandle);
	
	for (my $x=0; $x <= $#conf; $x++) {
		my @tmp;
		@tmp=split("#", $conf[$x]);
		$conf[$x]=$tmp[0];
		ValueCheck($conf[$x], $x+1, $cFile);
		my @def="";
		$conf[$x]=~s/\t//ig;
		$conf[$x]=~s/\n//ig;
		if ($conf[$x]=~/\{/) {
			if ($curSection=~/\S/) {
				warning("[Error]", "line " . ($x+1) . " in config file \"$cFile\" starts a new { without terminating the current {. Recursion not permitted by iptablesbuild.", "config");
				exit 2;
			};
			$conf[$x]=~s/\s//ig;
			$curSection=$conf[$x];
			$curSection=~s/ //ig;
			$curSection=~s/\{//ig;
			Varcheck($curSection, ($x+1), $conf[$x], $cFile);
			next;
		};
		if ($conf[$x]=~/\[/ig) {
			$conf[$x]=~s/ //ig;
			$curSubSection=$conf[$x];
			$curSubSection=~s/\[//ig;	
			$curSubSection=~s/\]//ig;
			Varcheck($curSubSection, ($x+1), $conf[$x], $cFile);
			if ($curSection eq "Products" || $curSection eq "Systems" ) {
				if (keys %{$Product{$curSubSection}} > 0) {
					warning("[Error]", "System/Product Area \"$curSubSection\" is defined twice!", "config");
					exit 2;
				};
			}
			elsif ($curSection eq "Templates") {
					
				if (keys %{$Template{$curSubSection}} > 0) {
					warning("[Error]", "Template \"$curSubSection\" is defined twice!", "config");
					exit 2;
				};
			}
			elsif ($curSection eq "Config") {
				warning("[Error]", "Config directives do not include [] groupings", "config");
				exit 2;
			};
			next;
		};
		# This assigns each variable defined in the config file to a variable here. 
		if ($conf[$x]=~/\=/ig) {
			my @def=split("=", $conf[$x]);
			while ($def[0]=~/^\s/ || $def[0]=~/\s$/) {
				$def[0]=~s/^\s+//ig;
				$def[0]=~s/\s+$//ig;
			};
			if (!(defined $def[1])) {
				$def[1] = "";
			};
			while ($def[1]=~/^\s/ || $def[1]=~/\s$/) {
				$def[1]=~s/^\s+//ig;
				$def[1]=~s/\s+$//ig;
			};
			Varcheck($def[0], ($x+1), $cFile);
			if ($curSection eq "Products" || $curSection eq "Systems") {
				if (defined $Product{$curSubSection}{$def[0]} && $Product{$curSubSection}{$def[0]}=~/\S/) {
					warning("[Warning]", "System/Product variable $def[0] for System/Product $curSubSection is defined twice!", "config");
				};
				#Assigns as $Product__<Product name>__<variable name>
				$Product{$curSubSection}{$def[0]}=[uniq(split(" ", $def[1]))];
				
				@{$Product{$curSubSection}{$def[0]}}=uniq(split(" ", $def[1]));
				if (!(defined ${$Product{$curSubSection}{$def[0]}}[0] && ${$Product{$curSubSection}{$def[0]}}[0] =~/\S/)) {
					$Product{$curSubSection}{$def[0]}= [" "];
				};
				if ($def[0] eq "alias") {
					my @hosts=split(" ", $def[1]);
					foreach my $host (@hosts) {
						if (defined $aliases{$host} && $aliases{$host}=~/\S/) {
							warning("Warning", "Error! Alias \"$host\" is set to refer to both $aliases{$host} and $curSubSection!", "config");
							exit 2;
						};
							
						$aliases{$host} = "$curSubSection";
					};
				};
			}
			elsif (defined $curSection && $curSection eq "Templates") {
				#Assigns as $Templates__<Product name>__<variable name>
				if (defined $Template{$curSubSection}{$def[0]} && $Template{$curSubSection}{$def[0]}=~/\S/) {
					warning("[Warning]", "Template variable $def[0] for template $curSubSection is defined twice!", "config");
				};
				$Template{$curSubSection}{$def[0]}=[uniq(split(" ", $def[1]))];
				if (${$Template{$curSubSection}{$def[0]}}[0] eq "") {
					$Template{$curSubSection}{$def[0]}= [" "];
				};
			}
			elsif (defined $curSection && $curSection eq "Global") {
				#Assigns as $Global__<variable name>
				if (defined $Global{$def[0]} && $Global{$def[0]} =~/\S/) {
					warning("[Warning]", "Global variable $def[0] is defined twice!", "config");
				};
				$Global{$def[0]}=[uniq(split(" ", $def[1]))];
				if (!(defined ${$Global{$def[0]}}[0] && ${$Global{$def[0]}}[0] =~/\S/)) {
					$Global{$def[0]}= [" "];
				};
			}
			elsif (defined $curSection && $curSection eq "Config") {
				if ($def[0] eq "suffix") {
					if ($def[1]=~/true/i) {
						$opt_suffix=1;
					}
					elsif ($def[1]=~/false/i) {
						$opt_suffix=0;
					}
					else {
						warning("[Error]", "line " . ($x+1) . " in config file \"$cFile\" $def[0] must be true or false", "config");
						exit 2;
					};
				}
				else {
					warning("[Error]", "line " . ($x+1) . " in config file \"$cFile\' line not understood as a config option", "config");
					exit 2;
				}
			}
			else {
				warning("[Error]", "line " . ($x+1) . " in config file \"$cFile\" not understood.", "config");
				exit 2;
			};
			next;
		};
		if ($conf[$x]=~/^\s*}\s*$/) {
			$curSection="";
			next;
		};
		if ($conf[$x]=~/include/) {
			next;
		};
		if ($conf[$x]=~/\S/) {
			warning("[Error]", "line " . ($x+1) . " in config file \"$cFile\" not understood.", "config");
			exit 2;
		};
	};
	if ($curSection=~/\S/) {
		warning("[Error]", "Missing right curly bracket '}' in config file \"$cFile\" to terminate \"$curSection\"", "config");
		exit 2;
	};
		
};

if (defined $opt_list) {
	printf("\n%-25s %s\n\n", "System", "Aliases");
	foreach my $key (keys %Product) {
		printf("%-25s %s\n", "$key :", join(",", @{$Product{$key}{"alias"}}));
	};
	exit 0;
};

my @Build=();
for (my $x=0; $x <= $#ARGV; $x++) {
	if ($ARGV[$x] =~/^all$/i) {
		@Build = keys %Product;
		last;
	};
	my $regex = $ARGV[$x];
	$regex =~s/\*/.*/ig;
	my $pass = 0;
	P: foreach my $prod (keys %Product) {
		if ($prod=~/^$regex$/) {
			@Build=(@Build, $prod);
			$pass = 1;
			next P;
		};
		A: foreach my $alias (@{$Product{$prod}{"alias"}}) {
			if ($alias=~/^$regex$/i || $alias eq $regex) {
				@Build=(@Build, $prod);
				$pass = 1;
				last A;
			};
		};
	}
	if (!($pass)) {
		warning("[Warning]", "\"$ARGV[$x]\" is not a defined product in $config.\n\nUsage: iptablesbuild.pl <Product>\nType all to build for all products", "setup");
	}; 
};


@Build = uniq(@Build);
#Looks through all the products and builds the iptables config file for each one.
Build: foreach my $curProduct (@Build) {
	if ($curProduct =~/\S/) {
		print "######################################################################################\n";
		my $spin = 0;

			
		# Make the Template List for the top of the iptables file and make sure that they have a value
		foreach my $CoreChain (@CoreChains) {
			my @tList= ();
			my %priorityList = ();
			$Product{$curProduct}{"templates_$CoreChain"}=[VareqVar($curProduct,@{$Product{$curProduct}{"templates_$CoreChain"}})];
			foreach my $template (@{$Product{$curProduct}{"templates_$CoreChain"}}) {
				my $priority;
				if (defined $Template{$template}{"Priority"} && $Template{$template}{"Priority"}[0] =~/\S/) {
					$Template{$template}{"Priority"}[0]=~s/\s//ig;
					if (($Template{$template}{"Priority"}[0]=~/\D/)) {
						warning("[FAIL]", "Non-diget character '" . $Product{$curProduct}{"templates_$CoreChain"}[0] ."' used for Priority on template: \"$template\". Skipping $curProduct...", $curProduct);
						next Build;
					};
					$priority=$Template{$template}{"Priority"}[0];
				}
				else {
					$priority=50
				}
				if (defined $priorityList{$priority} && @{$priorityList{$priority}} > 0 ) {
					$priorityList{$priority} = [@{$priorityList{$priority}},$template];
				}
				else {
					$priorityList{$priority} = [$template];
				}
			};
			@tList = keys %priorityList;
			@tList = uniq(sort{ $a <=> $b }(@tList));
			$Product{$curProduct}{"templates_$CoreChain"}=[];
			for my $prio (@tList) {
				$Product{$curProduct}{"templates_$CoreChain"}=[@{$Product{$curProduct}{"templates_$CoreChain"}}, @{$priorityList{$prio}}];
			};
			if (defined ${$Product{$curProduct}{"templates_$CoreChain"}}[0] && ${$Product{$curProduct}{"templates_$CoreChain"}}[0]=~/\S/ ) {
				foreach my $templateList (@{$Product{$curProduct}{"templates_$CoreChain"}}) {
					if ($templateList =~/\S/ig) {
						if (defined $Product{$curProduct}{"TemplateList_$CoreChain"} && @{$Product{$curProduct}{"TemplateList_$CoreChain"}} > 0 ) {
							$Product{$curProduct}{"TemplateList_$CoreChain"} = [@{$Product{$curProduct}{"TemplateList_$CoreChain"}}, $templateList];
						}
						else {
							$Product{$curProduct}{"TemplateList_$CoreChain"} = [$templateList];
						};
					};
				};
			}
			else {
				$Product{$curProduct}{"TemplateList_$CoreChain"}= [" "];
			};
			$Product{$curProduct}{"templates_$CoreChain"}=["AllPreface_$CoreChain", @{$Product{$curProduct}{"templates_$CoreChain"}}, "AllPostscript_$CoreChain"];
		};
		my @Output="";
		@Output= (@Output , "##\n");
		@Output= (@Output , "# Warning! This configuration was generated by iptablesbuild v$Version!\n");
		@Output= (@Output , "# Any changes you make to this file may be overwritten!\n");
		@Output= (@Output , "# Product/System: $curProduct\n");
		if (defined @{$Product{$curProduct}{"alias"}}) {
			@Output= (@Output , "# Aliases: " . join(", ", @{$Product{$curProduct}{"alias"}}) . "\n");
		};
		@Output= (@Output , "#\n\n\n\n");

		foreach my $CoreChain (@CoreChains) {
			#Creates a seperate Template list of the templates that where defined in the config file before adding to it.
			#Inserts the Templates that should be in every product into the template list
			if (!(defined $Product{$curProduct}{"templates_$CoreChain"} && $Product{$curProduct}{"templates_$CoreChain"} =~/\S/)) {
				$Product{$curProduct}{"templates_$CoreChain"} = [' '];
			};



			#This cycles through all the templates defined to be usd in this product.
			Template: foreach my $template (@{$Product{$curProduct}{"templates_$CoreChain"}}) {
				if ($template eq " ") {
					next Template;
				}
				my @file = "";
				#This opens the template file and stores it in @file
				if (defined $Template{$template}{"template"}[0] && $Template{$template}{"template"}[0]=~/\S/) {
					open(my $file, $Template{$template}{"template"}[0]) or die "\nFailed to open template file: \"$Template{$template}{\"template\"}[0]\"! from Template $template, for Product \"$curProduct\" exiting!";
					@file=<$file>;
					close($file);
					@file=(@file,"\n\n");
				}
				else {
					warning("[FAIL]", "Template file for $template not defined! Skipping $curProduct...", $curProduct);
					next Build;
				};
				#This cycles through the file in order to replace variables with the correct values
				my $lineNum = 0;
				FileLine: foreach my $line (@file) {
					$lineNum++;
					# Remove RCS header if present
					if ( $line=~/\$Header:/ ) {
                                       		$line="";  
					};
					while ($line=~/^\s+\n$/i) {
						$line=~s/^\s+\n$/\n/ig;
					};
					#if the current line contains a variable continue, if not go to the next line.
					if ($line=~/\@/ig) {
						$line=~s/\n/ \n/ig;
						my @lineWords=split(" ", $line);
						#Splits the file into individual words and cycles through them.
						foreach my $lineWord (@lineWords) {
							#if the word contains a variable continue, if not go onto the next word.
							if ($lineWord=~/\@/ig) {
								my @varList=split("\@", $lineWord);
								shift(@varList);
								#This removes all of the junk characters in front of the variable, and seperates multiple variables on the same line; in order to help process it. Then cycles through the list
								foreach my $var (@varList) {

									#if the current value of split contains a variable, process it.
									$var=~s/-//ig;
									$var=~s/"//ig;
									# check to see if the variable exists. if it doesn't complain and comment that line out.
									if (!(defined $Product{$curProduct}{$var} && @{$Product{$curProduct}{$var}} > 0)) {
										if (!(defined $Global{$var} && @{$Global{$var}} > 0)) {
											my $tmp=$line;
											$tmp=~s/\n//ig;
											warning("[Warning]", "\r\@$var has not been defined for product: $curProduct!\nrule line: $lineNum in $template: \"$tmp\" has been commented out", $curProduct);
											$line="#$line";
											next FileLine;
										};
									};
									my $tmp=$line;
									my @entries=VareqVar($curProduct, "\@$var");
									#this checks to see if that variable has been defined, but has no value. if this is the case, it just comments it out.
									
									if (@entries == 0) {
										$line=~s/\n//ig;
										$line="#$line # Line commented out due to lack of value for \@$var\n";
									}
									else {
										#cycle through all the values contained within the variable. and create new lines for each one. 
										$line="\#\$\\\n$line";
										my $varNum=0;
										foreach my $host (@entries) {
											my $lookup = "";
											my $hostname = "";
											# If assigning multiple variables to a line, create new lines for each additional value.
											if ( $varNum > 0 ) {
												$line="$line$tmp";
											};
											$host=~s/ //ig;
											$host=~s/\n//ig;
											$host=~s/\t//ig;
											if (!($host=~/^\d+\.\d+\.\d+\.\d+$/ig || $host=~/^\d+\.\d+\.\d+\.\d+\/\d+$/ig)) {
												if ( $host ne "") {
													if ($lookup eq "" && !($var=~/templatelist/i) && !($var=~/templates/) && !($host=~/^eth\d+/ || $host=~/^bond\d+/ || $host=~/^bond\d+/ || $host=~/^em\d+/ || $host=~/^p\d+p\d+/ ||  $host=~/^ib\d+/ || $host=~/^rhevm$/)) {
														$lookup=`nslookup \"$host\" | grep -i "address:" | grep -v "#" | awk '{print \$2}'`;
														$lookup=~s/\n/ /ig;
														$lookup=~s/\n$//;
														if ($lookup eq "") {
															warning("[FAIL]", "\rvalue \"$host\" is not a valid hostname or dns is not functioning proporly. Skipping this system...", $curProduct);
															next Build;
														};
													};
													if ($lookup=~/\d+\.\d+\.\d+\.\d+/ig) {
														$hostname=$host;
														$host=$lookup;
													};
												};
											};
											#print "host:$hostname: $host\n";
											if ($host=~/^\S+\s\S/) {
												my @tmp = split(" ", $host);
												@tmp=sort(@tmp);
												$host = join(" ", @tmp);
											};
											while ($host=~/^(\S+)\s\S/) {
												my $entry=$1;
												$host=~s/^$entry //ig;
												$line=~s/\@$var /$entry /g;
												$line=~s/\@$var\@/$entry\@/g;
												$line=~s/\@$var\\/$entry/g;
												$line="$line$tmp";
											};
											$host=~s/\s//ig;
											$host=~s/^\s*(\s+)\s*/$1/ig;
											$line=~s/\@$var /$host /g;
											$line=~s/\@$var\@/$host\@/g;
											$line=~s/\@$var\\/$host/g;
											#if the line contains a ip address, try to find out it's hostname, and place that in a comment after the line.
											if ($host=~/(\d+)\.(\d+)\.(\d+)\.(\d+)$/ig || $host=~/(\d+)\.(\d+)\.(\d+)\.(\d+)/ig) {
												
												print "\rBuilding $curProduct: " . $spinner[$spin % 4];
												$spin++;
	
												$lookup=~s/\n//ig;
												if (!(defined $hostname && $hostname =~/\S/)) {
													my $cmd="nslookup \"$1.$2.$3.$4\" | grep \"name =\"| awk '{print \$4}'";
													$lookup=`$cmd`;
													$lookup=~s/\n//ig;
													$line=~s/\#\$\\/\n# $lookup/ig;
												}
												else {
													$hostname=~s/\n//ig;
													$line=~s/\#\$\\/\n# $hostname/ig;
												};
												$line=~s/\n$/\#\$\\\n/ig;
											};
											$varNum++;
										};
									};
								};
							};
						};
					};
					$line=~s/\#\$\\\n/\n/ig;
				};
				#add the contents of the current file to the Output.
				@Output=(@Output, @file, "\n\n");
			};
		};
		print "\rBuilding $curProduct: Complete!\n";
		my $file = join("", VareqVar($curProduct, "\@file"));
		if (!($file =~/\S/)) {
			warning("[Warning]", "\n\@file location not defined. using /tmp/iptables", $curProduct);
			$file = "/tmp/iptables";
		};
		if ($file eq "\@") {
			warning("[FAIL]", "\nfile location is invalid '$file'. Skipping $curProduct...", $curProduct);
			next Build;
		};
		$file=~s/\s+//ig;
		if ($opt_suffix == 1) {
			$file .= ".$curProduct";
		};
		open(my $out, "> $file") or die "Failed to open $file\n";
			for (my $y=0; $y <= $#Output; $y++) {
			print $out "$Output[$y]";
		};
		close($out);
		print "\nProduct $curProduct built successfully!\n";
		print "Temporary file located at $file\n";
		print "Copy the iptables config over the given system's /etc/sysconfig/iptables file to install\n";
		print "Be Sure to check to see if this config is how you want it before using!\n\n";

		my $errors= `/usr/sbin/iptablestest $file`;
		if ($errors=~/error/i) {
			warning("[Error]", "\n\niptablestest found the following critical errors with the generated file:\n$errors", $curProduct);
		};
	};	
};

# When building multiple systems, print out all errors at the end.
if (@Build > 1) {
	my @warnKeys = keys %Warnings;
	print "\n\n\n\n";
	if (@warnKeys == 0) {
		print "Requested builds: (" . join(" ", @Build) . ") built Successfully!\n";
		exit 0;
	}
	else {
		print STDERR "Errors where found when building the given product/system areas:\n";
		foreach my $key (@warnKeys) {
			print "\n\n$key:\n$Warnings{$key}";
		};
		exit 1;
	};
};



#################################
########## Subroutines ##########
#################################



#This subroutine checks for characters in the variables that are unacceptable
sub Varcheck {
	my @letters=split( "", "$_[0]");
	my $characters="abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ_-/\\\r\n";
	for (my $x=0; $x <= $#letters; $x++) {
		if ("$characters"=~/$letters[$x]/g) {
		}
		else {
			warning("[Error]", "\nSyntax Error!! Line $_[1]. Illegal character \"$letters[$x]\" detected in config file \"$_[2]\"!", "Varcheck");
			exit 2;
		};
	};
};

sub ValueCheck {
	my @letters=split( "", "$_[0]");
	my $characters="abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ_ }{=-.,:[]\n/#\t@\\\/\r\n";
	for (my $x=0; $x <= $#letters; $x++) {
		if ("$characters"=~/\Q$letters[$x]\E/g) {
		}
		else {
			warning("[Error]", "\nSyntax Error!! Line $_[1]. Illegal character \"$letters[$x]\" Used!", "valueCheck");
			exit 2;
		};
	};
	if ($_[0]=~/= (\w+)/ig) {
		warning("[Error]", "\nSyntax Error!! Line $_[1]. Illegal character combination \"= $1\" detected in config file \"$_[2]\"!", "valueCheck");
		exit 2;
	};
};


# VareqVar
# This subroutine handles variable definitions where one variable is set to the value of annother, but following the tree and pulling all the leaf values.
#
# INPUT1: product/system name
# INPUT2-*: variable list to decompile
# OUTPUT: variable tree leaves. (array)
sub VareqVar {
	my @vals=undef;
	my $curProduct = shift(@_);
	for my $value (@_) {
		my $trans = $value;
		my @tmp=undef;
		if ( $trans=~/\@/) {
			$trans=~s/\@//ig;
			if (defined $Product{$curProduct}{$trans} && @{$Product{$curProduct}{$trans}} > 0) {
				@tmp = VareqVar($curProduct, @{$Product{$curProduct}{$trans}});
			}
			elsif (defined $Global{$trans} && @{$Global{$trans}} > 0) {
				@tmp = VareqVar($curProduct, @{$Global{$trans}});
			}
			else {
				warning("[Warning]", "Variable '\@$trans' undefined!", $curProduct);
			};
			if (@tmp > 0) {
				if (@vals == 0 ) {
					@vals=@tmp;
				}
				else {
					@vals=(@vals, @tmp);
				};
			};
		}
		else {
			if (@vals == 0) {
				@vals=($value);
			}
			else {
				@vals=(@vals,$value);
			};
		};
	};
	return uniq(@vals);
};

# uniq
# This makes sure all entries in the variable are unique. If it finds a duplicate, it removes it.
#
# INPUT1-*: Array entries
# OUTPUT: Same array entries with duplicates removed.
sub uniq {
	my @return = ();
	my %seen = ();
	foreach my $elem ( @_ ) {
		if (defined $elem && !(defined $seen{$elem})) {
			$seen{$elem} = 1;
			if (!($elem=~/ /ig)) {
				if (!(defined $return[0] && $return[0] =~/\S/)) {
					@return = $elem;
				}
				else {
					@return=(@return, $elem);
				};
			};
		};
	};
	return @return;
};

# warning
# Display a warning message and save it to $Warnings to be printed out at the end
#
# INPUT1: Warning message
# INPUT2: if non 0 remove all line chars

sub warning {
	my $prefix = shift(@_);
	my $message = shift(@_);
	my $curProduct =shift(@_);

	if (!(defined $curProduct && $curProduct=~/\S/)) {
		$curProduct = " ";
	};
	my $color = `tput color > /dev/null 2>&1; echo \$?`;
	my $whitespace = "";

	if ($message =~/^(\s+)\S/) {
		$whitespace .= $1;
		$message=~s/^\s+(\S)/$1/i;
	};
	if ($color) {
		$prefix = $termColors{"red"} . $prefix;
	}
	else {
		$prefix = $termColors{"bold"} . $prefix;
	};
	$prefix .=$termColors{"reset"};

	$Warnings{$curProduct} .= "$prefix $message\a\n";
	print STDERR "$whitespace$prefix $message\a\n";
}

# Documentation

=pod

=head1 NAME

B<iptablesbuild> - builds new iptables configuration files

=head1 SYNOPSIS

B<iptablesbuild> [-v|--help]

B<iptablesbuild> [options] [system]

=head1 DESCRIPTION

B<iptablesbuild> uses the templates available within the iptables template direcotory (located in //etc/iptablesbuild/Templates) to construct iptables configuration files. The specific templates used and base configuration is determined by iptablesbuild.conf(/etc/iptablesbuild/iptablesbuild.conf. You can get more information on iptablesbuild.conf in the iptablesbild.conf man page.

=head1 OPTIONS

=over 4

=item B<-v|--version>

Displays version information

=item B<-h|--help>

Displays help messages

=back

=head1 EXAMPLES

iptablesbuild web01 - This will build the configuration for web01.

=head1 SEE

=over 4

=item B<iptablestest, iptablesbuild.conf>
